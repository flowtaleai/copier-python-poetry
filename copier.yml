_templates_suffix: ""
_subdirectory: template
_envops:
  lstrip_blocks: true
  trim_blocks: true
  keep_trailing_newline: true

# ====== QUESTIONS ======
author_name:
  type: str
  help: "Your Name"
  validator: >-
    {% if author_name | length < 2 %}
    Author name must be at least 2 characters long.
    {% endif %}

author_email:
  type: str
  help: "Email of the author of the project"
  validator: >-
    {% if not (author_email | regex_search('.+@.+\..+')) %}
    Author email must be a valid email address.
    {% endif %}

package_name:
  type: str
  placeholder: package_name
  help: |-
    Python package name.
    The package name can contain '.' if you are creating a namespaced package,
    but supports a maximum package nesting of three levels.
  validator: |-
    {% if not (package_name | regex_search('^([a-z][a-z0-9_]*)+(\.[a-z][a-z0-9_]*){0,2}$')) %}
    package name must start with a lowercase letter and can only contain lowercase letters, numbers, or underscores.
    {% endif %}

distribution_name:
  type: str
  placeholder: distribution-name
  default: "{{ package_name }}"
  help: |-
    Distribution name of the python package.
    The distribution name is used when installing and referring to the package.
    Distribution name should be similar to package name but can like scikit-learn
    (sklearn) be different.
  validator: >-
    {% if not (distribution_name | regex_search('^(?!.*\..*\..*\.)[a-z0-9]+(?:[._-][a-z0-9]+)*$')) %}
    distribution name must start with a lowercase letter and can only contain lowercase letters, numbers, dashes, underscores, or dots.
    {% endif %}

project_name:
  type: str
  help: "Human friendly project name [OPTIONAL]"

project_short_description:
  type: str
  placeholder: Python project boilerplate to create a Python package.
  help: "A short description describing what the project is"

version:
  type: str
  default: "0.0.0"
  help: "Project version"
  validator: >-
    {% if not (version | regex_search('^\d+(\.\d+){2}$')) %}
    Version must be in the format of 'MAJOR.MINOR.PATCH', where MAJOR, MINOR, and PATCH are non-negative integers without leading zeroes, separated by dots. For example, '1.2.3'.
    {% endif %}

license:
  type: str
  choices:
    - Proprietary
    - MIT license
    - BSD license
    - ISC license
    - Apache Software License 2.0
    - GNU General Public License v3

package_type:
  choices:
    - cli
    - library
  help: "If the package is an executable a CLI is generated"

python_version:
  type: str
  choices:
    - "3.9"
    - "3.10"
    - "3.11"
    - "3.12"
    - "3.13"
  default: "3.10"
  help: "Python version to use"

poetry_version:
  type: str
  default: "1.8.3"
  help: "Poetry version to use across all environments"
  validator: >-
    {% if not (poetry_version | regex_search('^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$')) %}
    Poetry version must follow semantic versioning (e.g., 1.0.0, 2.1.3-alpha, 3.0.0+build123).
    {% endif %}

testing_framework:
  choices:
    - pytest
    - unittest
  default: pytest
  help: "Python testing framework"

max_line_length:
  type: int
  default: 88
  help: "Maximum code line length (default to black standard line length)"
  validator: >-
    {% if max_line_length < 0 %}
    Maximum line length must be positive.
    {% endif %}

type_checker:
  choices:
    - none
    - mypy
  default: none
  help: "Include type checker for static type checking, improving code quality and catching potential errors early in development"

type_checker_strictness:
  choices:
    - gradual
    - strict
  default: strict
  when: "{{ type_checker != 'none' }}"
  help: "Whether or not to support gradual typing with the type-checker."

use_lint_strict_rules:
  type: bool
  default: true
  help: "Include linter strict checks that makes code cleaner and safer but require more coding skills"

ide:
  choices:
    - none
    - vscode
  default: vscode
  help: "Preferred IDE"

git_hosting:
  type: str
  choices:
    - "none"
    - "gitlab"
    - "github"
    - "bitbucket"
  default: "none"
  help: "Git hosting provider for CI pipeline configuration"

generate_docs:
  choices:
    - none
    - mkdocs
    - pdoc
  default: none
  help: "Generate package documentation"

use_jupyter_notebooks:
  type: bool
  default: false
  help: "Enable support for Jupyter notebooks and associated pre-commit hooks"

generate_example_code:
  type: bool
  help: "Generate example code to demonstrate how to use the template"
  default: true

strip_jupyter_outputs:
  type: bool
  default: true
  help: "Strip output from Jupyter notebooks before committing"
  # Only ask if project uses Jupyter notebooks
  when: "{{ use_jupyter_notebooks == true }}"

generate_dockerfile:
  type: bool
  default: false
  help: "Generate Dockerfile for containerized development/deployment"
  when: "{{ package_type == 'cli' }}"

lint_dockerfile:
  type: bool
  default: false
  help: "Include a pre-commit hook for Dockerfile linting"
